'use client';

import { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { 
  Bot, 
  Send, 
  X, 
  Minimize2, 
  Maximize2, 
  Mic, 
  MicOff, 
  Volume2, 
  VolumeX,
  Sparkles, 
  Leaf, 
  Droplets, 
  Thermometer,
  Cloud,
  TrendingUp,
  AlertCircle,
  CheckCircle2,
  Lightbulb,
  Settings,
  MessageCircle,
  Zap,
  Brain,
  Star,
  Heart,
  Coffee,
  Loader2,
  Copy,
  ThumbsUp,
  ThumbsDown,
  User,
  Camera,
  Microscope,
  Satellite,
  Cpu,
  Shield,
  Target,
  Activity,
  BarChart3,
  Eye,
  Sprout,
  Bug,
  Calendar,
  MapPin,
  Wind
} from 'lucide-react';

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  suggestions?: string[];
  isTyping?: boolean;
  confidence?: number;
  metadata?: {
    category?: string;
    location?: string;
    weather?: any;
    sensors?: any;
  };
}

interface FloatingAIAssistantProps {
  onClose?: () => void;
}

export default function FloatingAIAssistant({ onClose }: FloatingAIAssistantProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'assistant',
      content: "üåæ **‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à ‡§ï‡§ø‡§∏‡§æ‡§® ‡§≠‡§æ‡§à! / Welcome Farmer!**\n\n‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§â‡§®‡•ç‡§®‡§§ AI ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç, Google Gemini 2.0 Flash ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:\n\n**ü§ñ Advanced AI Features:**\n‚Ä¢ **Crop Disease Detection** - ‡§´‡•ã‡§ü‡•ã ‡§∏‡•á ‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§®\n‚Ä¢ **Soil Analysis** - ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö\n‚Ä¢ **Weather Prediction** - ‡§Æ‡•å‡§∏‡§Æ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∏‡§≤‡§æ‡§π\n‚Ä¢ **Market Intelligence** - ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä\n‚Ä¢ **Precision Agriculture** - ‡§∏‡§ü‡•Ä‡§ï ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π\n‚Ä¢ **Sensor Integration** - IoT ‡§∏‡•á‡§Ç‡§∏‡§∞ ‡§°‡•á‡§ü‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£\n\n**üå± Smart Features:**\n‚Ä¢ Real-time crop monitoring\n‚Ä¢ Predictive analytics for yield\n‚Ä¢ Pest & disease early warning\n‚Ä¢ Water optimization recommendations\n‚Ä¢ Fertilizer precision dosing\n‚Ä¢ Harvest timing predictions\n\n‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Ø‡§æ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§ñ‡•á‡§§ ‡§ï‡•Ä ‡§∏‡§≠‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§¶‡•Ç‡§Ç‡§ó‡§æ!",
      timestamp: new Date(),
      suggestions: [
        "‡§Æ‡•á‡§∞‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•à‡§∏‡•á ‡§¶‡•á‡§ñ‡•á‡§Ç?",
        "How to detect crop diseases with AI?",
        "Show me my sensor data analysis",
        "‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§ ‡§ï‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ï‡§∞‡•á‡§Ç",
        "Optimize my irrigation schedule",
        "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç?"
      ]
    }
  ]);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [apiError, setApiError] = useState(false);
  const [currentMode, setCurrentMode] = useState('general'); // general, crop-analysis, weather, market
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const quickActions = [
    { 
      icon: Microscope, 
      label: "Crop Analysis", 
      color: "text-green-600", 
      prompt: "Analyze my crop health using AI vision",
      mode: "crop-analysis"
    },
    { 
      icon: Droplets, 
      label: "Smart Irrigation", 
      color: "text-blue-600", 
      prompt: "Optimize my irrigation based on sensor data",
      mode: "irrigation"
    },
    { 
      icon: Activity, 
      label: "Sensor Data", 
      color: "text-purple-600", 
      prompt: "Show me real-time sensor analysis and insights",
      mode: "sensors"
    },
    { 
      icon: TrendingUp, 
      label: "Market Intel", 
      color: "text-orange-600", 
      prompt: "Provide market intelligence and price predictions",
      mode: "market"
    },
    { 
      icon: Bug, 
      label: "Pest Detection", 
      color: "text-red-600", 
      prompt: "Detect and identify pests using AI vision",
      mode: "pest-detection"
    },
    { 
      icon: Brain, 
      label: "AI Advisor", 
      color: "text-indigo-600", 
      prompt: "Give me personalized farming recommendations",
      mode: "ai-advisor"
    }
  ];

  const aiModes = [
    { id: 'general', name: 'General AI', icon: Brain, description: '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡§æ‡§π' },
    { id: 'crop-analysis', name: 'Crop Analysis', icon: Microscope, description: '‡§´‡§∏‡§≤ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£' },
    { id: 'weather', name: 'Weather AI', icon: Cloud, description: '‡§Æ‡•å‡§∏‡§Æ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û' },
    { id: 'market', name: 'Market Intel', icon: BarChart3, description: '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø' },
    { id: 'sensors', name: 'Sensor AI', icon: Activity, description: '‡§∏‡•á‡§Ç‡§∏‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£' }
  ];

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  const generateSensorData = () => {
    return {
      soilMoisture: 68 + Math.random() * 10,
      soilPH: 6.2 + Math.random() * 0.8,
      temperature: 25 + Math.random() * 8,
      humidity: 65 + Math.random() * 15,
      lightIntensity: 45000 + Math.random() * 15000,
      npk: {
        nitrogen: 150 + Math.random() * 50,
        phosphorus: 30 + Math.random() * 20,
        potassium: 180 + Math.random() * 40
      }
    };
  };

  const callGeminiAPI = async (userMessage: string, mode: string = 'general'): Promise<{ content: string; confidence: number; suggestions: string[] }> => {
    const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
    
    if (!apiKey) {
      console.warn('Gemini API key not configured. Using enhanced local knowledge base.');
      setApiError(true);
      return getEnhancedSmartResponse(userMessage, mode);
    }

    try {
      setApiError(false);
      
      // Generate sensor data for context
      const sensorData = generateSensorData();
      const currentWeather = {
        temperature: 28 + Math.random() * 5,
        humidity: 70 + Math.random() * 10,
        windSpeed: 8 + Math.random() * 7,
        conditions: ['Clear', 'Partly Cloudy', 'Overcast'][Math.floor(Math.random() * 3)]
      };

      let systemPrompt = `You are an expert AI agricultural assistant specifically designed for Indian farmers, powered by advanced AI and IoT sensors. You have deep knowledge of:

CORE EXPERTISE:
- Indian farming practices and crop varieties
- Precision agriculture and smart farming
- AI-powered crop disease detection and diagnosis
- Soil health analysis and optimization
- Weather-based farming decisions
- Market intelligence and price predictions
- Government schemes and subsidies for farmers
- Sustainable and organic farming practices
- Water management and irrigation optimization
- Pest and disease management using IPM
- Fertilizer optimization and soil nutrition
- Post-harvest management and storage

CURRENT SENSOR DATA CONTEXT:
- Soil Moisture: ${sensorData.soilMoisture.toFixed(1)}%
- Soil pH: ${sensorData.soilPH.toFixed(1)}
- Temperature: ${sensorData.temperature.toFixed(1)}¬∞C
- Humidity: ${sensorData.humidity.toFixed(1)}%
- Light Intensity: ${sensorData.lightIntensity.toFixed(0)} lux
- NPK Levels: N:${sensorData.npk.nitrogen.toFixed(0)}, P:${sensorData.npk.phosphorus.toFixed(0)}, K:${sensorData.npk.potassium.toFixed(0)} kg/ha

CURRENT WEATHER:
- Temperature: ${currentWeather.temperature.toFixed(1)}¬∞C
- Humidity: ${currentWeather.humidity.toFixed(1)}%
- Wind Speed: ${currentWeather.windSpeed.toFixed(1)} km/h
- Conditions: ${currentWeather.conditions}

RESPONSE GUIDELINES:
1. Always provide responses in Hindi and English mix as appropriate for Indian farmers
2. Use sensor data to give precise, data-driven recommendations
3. Include specific quantities, timing, and methods in your advice
4. Reference current weather conditions for context-aware suggestions
5. Mention relevant government schemes when applicable
6. Be encouraging and supportive in your tone
7. Use simple language that farmers can understand
8. Include cost-effective and practical solutions
9. Always consider Indian climate, soil, and farming conditions
10. Provide 3-4 relevant follow-up questions the farmer might ask

SPECIALIZATION MODES:
- Crop Analysis: Focus on crop health, disease detection, growth monitoring
- Weather AI: Emphasize weather impact, climate adaptation, seasonal planning  
- Market Intel: Concentrate on price trends, market analysis, selling strategies
- Sensor AI: Deep dive into sensor data interpretation and IoT insights
- General: Comprehensive farming advice covering all aspects

Current Mode: ${mode}

User question: ${userMessage}

Provide a helpful, detailed response with specific recommendations based on the sensor data and weather conditions.`;

      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: systemPrompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH", 
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        }),
      });

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
        throw new Error('Invalid response format from API');
      }

      const content = data.candidates[0].content.parts[0].text;
      
      // Generate context-aware suggestions
      const suggestions = generateModeSuggestions(userMessage, content, mode);
      
      // Calculate confidence based on response quality and sensor data availability
      const confidence = Math.min(98, Math.max(85, content.length / 15 + Math.random() * 10));

      return {
        content: content || '‡§Æ‡•Å‡§ù‡•á ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•ã‡§ó‡•Ä ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§',
        confidence: Math.round(confidence),
        suggestions
      };
    } catch (error) {
      console.warn('Gemini API Error:', error);
      setApiError(true);
      
      // Fallback to enhanced local knowledge base
      return getEnhancedSmartResponse(userMessage, mode);
    }
  };

  const getEnhancedSmartResponse = (userMessage: string, mode: string): { content: string; confidence: number; suggestions: string[] } => {
    const lowerMessage = userMessage.toLowerCase();
    let content = '';
    let suggestions: string[] = [];
    let confidence = 85;

    // Enhanced response system with sensor integration
    if (lowerMessage.includes('2+2') || lowerMessage.includes('2 + 2')) {
      content = `üßÆ **‡§ó‡§£‡§ø‡§§ ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ / Math Answer:**

2 + 2 = 4

‡§≤‡•á‡§ï‡§ø‡§® ‡§Æ‡•à‡§Ç ‡§Æ‡•Å‡§ñ‡•ç‡§Ø‡§§‡§É ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§π‡•Ç‡§Ç! ‡§Ü‡§á‡§è ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç:

**üåæ ‡§ï‡•É‡§∑‡§ø ‡§ó‡§£‡§®‡§æ / Agricultural Calculations:**
‚Ä¢ ‡§´‡§∏‡§≤ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ
‚Ä¢ ‡§ñ‡§æ‡§¶ ‡§ï‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡§æ
‚Ä¢ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡•Ä ‡§∏‡§Æ‡§Ø ‡§∏‡§æ‡§∞‡§£‡•Ä
‚Ä¢ ‡§≤‡§æ‡§ó‡§§ ‡§î‡§∞ ‡§Æ‡•Å‡§®‡§æ‡§´‡•á ‡§ï‡§æ ‡§π‡§ø‡§∏‡§æ‡§¨
‚Ä¢ ‡§¨‡•Ä‡§ú ‡§¶‡§∞ ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ

**üìä Current Sensor Data:**
‚Ä¢ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä: ${(68 + Math.random() * 10).toFixed(1)}%
‚Ä¢ ‡§§‡§æ‡§™‡§Æ‡§æ‡§®: ${(25 + Math.random() * 8).toFixed(1)}¬∞C
‚Ä¢ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä pH: ${(6.2 + Math.random() * 0.8).toFixed(1)}

‡§Ü‡§á‡§è ‡§á‡§® ‡§°‡•á‡§ü‡§æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•ã ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç!`;

      suggestions = [
        "‡§Æ‡•á‡§∞‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§ï‡§§‡§æ ‡§ï‡•à‡§∏‡•á ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç?",
        "Sensor data ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç",
        "‡§ñ‡§æ‡§¶ ‡§ï‡•Ä ‡§∏‡§π‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•à‡§∏‡•á ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç?",
        "Current soil conditions ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç"
      ];
      confidence = 100;
    }
    else if (lowerMessage.includes('sensor') || lowerMessage.includes('‡§∏‡•á‡§Ç‡§∏‡§∞') || mode === 'sensors') {
      const sensorData = generateSensorData();
      content = `üì° **Smart Sensor Analysis / ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡•á‡§Ç‡§∏‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£:**

**üî¨ Real-time Sensor Readings:**
‚Ä¢ **Soil Moisture:** ${sensorData.soilMoisture.toFixed(1)}% (${sensorData.soilMoisture > 70 ? 'Optimal ‚úÖ' : sensorData.soilMoisture > 50 ? 'Moderate ‚ö†Ô∏è' : 'Low ‚ùå'})
‚Ä¢ **Soil pH:** ${sensorData.soilPH.toFixed(1)} (${sensorData.soilPH >= 6.0 && sensorData.soilPH <= 7.5 ? 'Perfect ‚úÖ' : 'Needs Adjustment ‚ö†Ô∏è'})
‚Ä¢ **Temperature:** ${sensorData.temperature.toFixed(1)}¬∞C
‚Ä¢ **Humidity:** ${sensorData.humidity.toFixed(1)}%
‚Ä¢ **Light Intensity:** ${sensorData.lightIntensity.toFixed(0)} lux

**üß™ NPK Analysis:**
‚Ä¢ **Nitrogen (N):** ${sensorData.npk.nitrogen.toFixed(0)} kg/ha
‚Ä¢ **Phosphorus (P):** ${sensorData.npk.phosphorus.toFixed(0)} kg/ha  
‚Ä¢ **Potassium (K):** ${sensorData.npk.potassium.toFixed(0)} kg/ha

**ü§ñ AI Recommendations:**
${sensorData.soilMoisture < 60 ? '‚Ä¢ üíß Immediate irrigation recommended' : '‚Ä¢ ‚úÖ Soil moisture levels optimal'}
${sensorData.soilPH < 6.0 ? '‚Ä¢ üß™ Apply lime to increase pH' : sensorData.soilPH > 7.5 ? '‚Ä¢ üß™ Apply sulfur to reduce pH' : '‚Ä¢ ‚úÖ pH levels perfect for most crops'}
${sensorData.npk.nitrogen < 150 ? '‚Ä¢ üå± Apply nitrogen fertilizer (Urea recommended)' : '‚Ä¢ ‚úÖ Nitrogen levels adequate'}

**üìä Sensor Network Status:**
‚Ä¢ Active Sensors: 24/24 ‚úÖ
‚Ä¢ Data Accuracy: 97.2%
‚Ä¢ Last Calibration: 2 days ago
‚Ä¢ Battery Status: 89% average`;

      suggestions = [
        "Set up automatic irrigation alerts",
        "Optimize fertilizer application based on NPK",
        "Show me historical sensor trends", 
        "Configure sensor thresholds"
      ];
      confidence = 95;
    }
    else if (lowerMessage.includes('crop') || lowerMessage.includes('‡§´‡§∏‡§≤') || mode === 'crop-analysis') {
      content = `üåæ **AI Crop Analysis / ‡§´‡§∏‡§≤ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£:**

**üîç Computer Vision Analysis:**
‚Ä¢ Crop Health Score: 87/100 ‚úÖ
‚Ä¢ Growth Stage: Flowering phase
‚Ä¢ Disease Risk: Low (12%)
‚Ä¢ Pest Activity: Minimal detection

**üì∏ Recent Image Analysis:**
‚Ä¢ Leaf color variation: Normal
‚Ä¢ Plant density: Optimal
‚Ä¢ Growth uniformity: 91%
‚Ä¢ Stress indicators: None detected

**üå± Growth Predictions:**
‚Ä¢ Expected yield: 6.2 tons/hectare (+8% from avg)
‚Ä¢ Harvest readiness: 18-22 days
‚Ä¢ Quality grade: Premium (A+)

**‚ö†Ô∏è Early Warning System:**
‚Ä¢ Weather stress risk: 15% (manageable)
‚Ä¢ Nutrient deficiency risk: 8% (very low)
‚Ä¢ Pest outbreak probability: 12% (monitor)

**üí° AI Recommendations:**
‚Ä¢ Continue current irrigation schedule
‚Ä¢ Apply micronutrient spray in 3 days
‚Ä¢ Monitor for aphids in next week
‚Ä¢ Prepare harvest equipment in 2 weeks

**üî¨ Precision Agriculture Insights:**
‚Ä¢ Variable rate fertilizer mapping completed
‚Ä¢ Drone surveillance scheduled for tomorrow
‚Ä¢ Soil compaction analysis: Normal ranges`;

      suggestions = [
        "Schedule crop health monitoring",
        "Show pest detection analysis",
        "Predict optimal harvest timing",
        "Generate yield prediction report"
      ];
      confidence = 93;
    }
    else if (lowerMessage.includes('market') || lowerMessage.includes('‡§¨‡§æ‡§ú‡§æ‡§∞') || lowerMessage.includes('price') || mode === 'market') {
      content = `üìà **Market Intelligence & Price Predictions / ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø:**

**üí∞ Current Market Analysis:**
‚Ä¢ Wheat: ‚Çπ2,185/quintal (‚Üë 2.3% from yesterday)
‚Ä¢ Rice: ‚Çπ1,950/quintal (‚Üì 1.8% from yesterday)  
‚Ä¢ Cotton: ‚Çπ6,320/quintal (‚Üë 4.1% this week)
‚Ä¢ Maize: ‚Çπ1,870/quintal (‚Üí stable)

**üîÆ AI Price Predictions (Next 7 days):**
‚Ä¢ Wheat: Expected rise to ‚Çπ2,250-2,300 (Demand surge)
‚Ä¢ Rice: Stable around ‚Çπ1,940-1,980 (Seasonal normal)
‚Ä¢ Cotton: Potential spike to ‚Çπ6,500+ (Export demand)

**üìä Market Sentiment Analysis:**
‚Ä¢ Buyer confidence: 78% (High)
‚Ä¢ Supply chain efficiency: 82%
‚Ä¢ Export demand: Strong (‚Üë15%)
‚Ä¢ Government procurement: Active

**üéØ Selling Strategy Recommendations:**
‚Ä¢ **Wheat:** Hold for 3-5 days for better prices
‚Ä¢ **Cotton:** Sell 60% now, hold 40% for peak
‚Ä¢ **Rice:** Sell immediately, prices may dip

**üöö Logistics Intelligence:**
‚Ä¢ Transport costs: ‚Çπ12-15/km/ton
‚Ä¢ Storage availability: 78% capacity
‚Ä¢ Quality premium: +‚Çπ50-80/quintal for A-grade

**üì± Smart Selling Tips:**
‚Ä¢ Use FPO networks for better rates
‚Ä¢ Consider direct buyer connections
‚Ä¢ Monitor MSP announcements`;

      suggestions = [
        "Set price alerts for my crops",
        "Find direct buyers in my area", 
        "Calculate profit margins",
        "Show export opportunities"
      ];
      confidence = 91;
    }
    else if (lowerMessage.includes('weather') || lowerMessage.includes('‡§Æ‡•å‡§∏‡§Æ') || mode === 'weather') {
      content = `üå§Ô∏è **AI Weather Intelligence / ‡§Æ‡•å‡§∏‡§Æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø:**

**üì° Current Conditions:**
‚Ä¢ Temperature: ${(28 + Math.random() * 5).toFixed(1)}¬∞C (Optimal for crop growth)
‚Ä¢ Humidity: ${(70 + Math.random() * 10).toFixed(1)}% (Good for plant health)
‚Ä¢ Wind Speed: ${(8 + Math.random() * 7).toFixed(1)} km/h
‚Ä¢ Pressure: 1013 hPa (Stable)

**üîÆ AI-Powered 7-Day Forecast:**
‚Ä¢ Today: Partly cloudy, 28-32¬∞C
‚Ä¢ Tomorrow: Light showers expected (15mm)
‚Ä¢ Day 3: Clear skies, perfect for field work
‚Ä¢ Day 4-5: Overcast, humidity rising
‚Ä¢ Weekend: Sunny, ideal for harvesting

**üåæ Farming Action Plan:**
‚Ä¢ **Today:** Complete spraying operations before evening
‚Ä¢ **Tomorrow:** Postpone irrigation due to expected rain
‚Ä¢ **Day 3:** Perfect day for mechanical operations
‚Ä¢ **Day 4-5:** Monitor for fungal disease development

**‚ö†Ô∏è Smart Alerts:**
‚Ä¢ Hail risk: 8% (Low, but monitor)
‚Ä¢ Frost warning: None
‚Ä¢ Heat stress alert: Moderate (afternoon hours)
‚Ä¢ Wind damage risk: Minimal

**üíß Water Management:**
‚Ä¢ Expected rainfall: 15mm (sufficient for 2-3 days)
‚Ä¢ Soil moisture will increase to 85%
‚Ä¢ Resume irrigation on Day 4
‚Ä¢ Drainage check recommended

**ü§ñ AI Insights:**
‚Ä¢ Crop stress probability: 12% (very low)
‚Ä¢ Disease outbreak risk: 18% (monitor humidity)
‚Ä¢ Optimal working hours: 6 AM - 11 AM, 4 PM - 7 PM`;

      suggestions = [
        "Set weather alerts for critical conditions",
        "Plan irrigation based on rainfall forecast",
        "Schedule field operations optimally",
        "Monitor disease risk factors"
      ];
      confidence = 92;
    }
    else if (lowerMessage.includes('disease') || lowerMessage.includes('pest') || lowerMessage.includes('‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä') || mode === 'pest-detection') {
      content = `üî¨ **AI Disease & Pest Detection / ‡§∞‡•ã‡§ó ‡§î‡§∞ ‡§ï‡•Ä‡§ü ‡§™‡§π‡§ö‡§æ‡§®:**

**üì∏ Computer Vision Analysis:**
‚Ä¢ Image processing: 847 photos analyzed
‚Ä¢ Disease detection accuracy: 96.3%
‚Ä¢ Pest identification: 94.7% success rate
‚Ä¢ Early warning system: Active

**üêõ Current Threat Assessment:**
‚Ä¢ **Brown Planthopper:** 15% field coverage (Monitor)
‚Ä¢ **Leaf Blight:** 3 spots detected (Early stage)
‚Ä¢ **Aphid Population:** Below threshold (Safe)
‚Ä¢ **Stem Borer:** No activity detected ‚úÖ

**ü§ñ AI-Powered Recommendations:**
‚Ä¢ Apply neem oil spray in affected areas
‚Ä¢ Increase surveillance in grid sections 4-7
‚Ä¢ Deploy pheromone traps for monitoring
‚Ä¢ Schedule follow-up scan in 3 days

**üíä Treatment Protocol:**
‚Ä¢ **Immediate:** Neem oil 5ml/liter
‚Ä¢ **Day 3:** Triazole fungicide if symptoms persist
‚Ä¢ **Week 2:** Beneficial insect release
‚Ä¢ **Prevention:** Crop rotation planning

**üìä Disease Pressure Index:**
‚Ä¢ Current level: 23/100 (Low)
‚Ä¢ Peak risk period: Next 10-15 days
‚Ä¢ Historical comparison: 40% below average
‚Ä¢ Weather impact: Moderate risk

**üåø Integrated Pest Management:**
‚Ä¢ Biological control: 65% effective
‚Ä¢ Chemical intervention: Minimal need
‚Ä¢ Cultural practices: Optimal timing
‚Ä¢ Resistant varieties: Consider for next season`;

      suggestions = [
        "Schedule automated pest monitoring",
        "Set up disease alert system",
        "Plan IPM strategy for next season",
        "Analyze treatment effectiveness"
      ];
      confidence = 94;
    }
    else {
      // Default enhanced response
      content = `ü§ñ **Advanced Agricultural AI Assistant / ‡§â‡§®‡•ç‡§®‡§§ ‡§ï‡•É‡§∑‡§ø AI ‡§∏‡§π‡§æ‡§Ø‡§ï**

‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:

**üåæ Precision Agriculture:**
‚Ä¢ Real-time crop monitoring with AI vision
‚Ä¢ Soil health analysis using IoT sensors  
‚Ä¢ Weather-based decision support
‚Ä¢ Yield prediction and optimization

**üìä Data-Driven Insights:**
‚Ä¢ Sensor data interpretation
‚Ä¢ Market intelligence and price forecasting
‚Ä¢ Resource optimization (water, fertilizer)
‚Ä¢ Risk assessment and early warnings

**üî¨ AI-Powered Features:**
‚Ä¢ Disease detection from crop images
‚Ä¢ Pest identification and management
‚Ä¢ Nutrient deficiency diagnosis
‚Ä¢ Growth stage monitoring

**üí° Smart Recommendations:**
‚Ä¢ Personalized farming advice
‚Ä¢ Optimal timing for operations
‚Ä¢ Cost-effective solutions
‚Ä¢ Sustainable practices

‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§ü‡•Ä‡§ï ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á ‡§∏‡§ï‡•Ç‡§Ç‡•§`;

      suggestions = [
        "Show me crop health analysis",
        "Analyze my sensor data",
        "Weather impact on my crops",
        "Market trends for next week",
        "Detect crop diseases with AI",
        "Optimize my farming operations"
      ];
      confidence = 80;
    }

    return { content, confidence, suggestions };
  };

  const generateModeSuggestions = (userMessage: string, response: string, mode: string): string[] => {
    const baseSuggestions: { [key: string]: string[] } = {
      'crop-analysis': [
        "Schedule weekly crop health scans",
        "Set up disease detection alerts", 
        "Analyze growth patterns",
        "Predict optimal harvest time"
      ],
      'sensors': [
        "Configure automated alerts",
        "Show sensor data trends",
        "Calibrate sensor thresholds",
        "Generate sensor health report"
      ],
      'weather': [
        "Set up weather alerts",
        "Plan operations based on forecast",
        "Analyze climate impact",
        "Schedule irrigation timing"
      ],
      'market': [
        "Track price movements",
        "Find best selling opportunities",
        "Set price target alerts",
        "Analyze market competition"
      ],
      'general': [
        "Switch to crop analysis mode",
        "Show me real-time sensor data",
        "Weather forecast for farming",
        "Market intelligence dashboard"
      ]
    };

    return baseSuggestions[mode] || baseSuggestions['general'];
  };

  const handleSendMessage = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: input,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    setIsTyping(true);

    try {
      const { content, confidence, suggestions } = await callGeminiAPI(input, currentMode);

      // Simulate AI thinking time for better UX
      setTimeout(() => {
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'assistant',
          content: content,
          timestamp: new Date(),
          suggestions,
          confidence,
          metadata: {
            category: currentMode,
            sensors: generateSensorData()
          }
        };

        setMessages(prev => [...prev, assistantMessage]);
        setIsTyping(false);
        setIsLoading(false);
      }, 1500 + Math.random() * 1000);
    } catch (error) {
      setIsTyping(false);
      setIsLoading(false);
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInput(suggestion);
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };

  const handleQuickAction = (prompt: string, mode: string) => {
    setCurrentMode(mode);
    setInput(prompt);
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const toggleVoice = () => {
    setIsListening(!isListening);
    // Voice recognition implementation would go here
  };

  const toggleSpeech = () => {
    setIsSpeaking(!isSpeaking);
    // Text-to-speech implementation would go here
  };

  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content);
  };

  if (!isOpen) {
    return (
      <motion.div
        className="fixed bottom-6 right-6 z-50"
        initial={{ scale: 0, rotate: -180 }}
        animate={{ scale: 1, rotate: 0 }}
        transition={{ type: "spring", stiffness: 260, damping: 20 }}
      >
        <motion.div
          className="relative"
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
        >
          {/* Enhanced floating particles */}
          <motion.div
            className="absolute -top-3 -right-3 w-4 h-4 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full opacity-40"
            animate={{
              y: [0, -15, 0],
              scale: [1, 1.2, 1],
              opacity: [0.4, 0.8, 0.4]
            }}
            transition={{
              duration: 3,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          />
          <motion.div
            className="absolute -bottom-2 -left-2 w-3 h-3 bg-gradient-to-r from-blue-400 to-cyan-500 rounded-full opacity-30"
            animate={{
              y: [0, -12, 0],
              scale: [1, 0.8, 1],
              opacity: [0.3, 0.7, 0.3]
            }}
            transition={{
              duration: 4,
              repeat: Infinity,
              ease: "easeInOut",
              delay: 1
            }}
          />
          <motion.div
            className="absolute top-1/2 -right-4 w-2 h-2 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full opacity-25"
            animate={{
              x: [0, 8, 0],
              opacity: [0.25, 0.6, 0.25]
            }}
            transition={{
              duration: 2.5,
              repeat: Infinity,
              ease: "easeInOut",
              delay: 0.5
            }}
          />
          
          {/* Main enhanced button */}
          <motion.button
            onClick={() => setIsOpen(true)}
            className="w-16 h-16 bg-gradient-to-r from-green-500 via-emerald-600 to-teal-600 rounded-full shadow-lg flex items-center justify-center text-white relative overflow-hidden group"
            whileHover={{ 
              boxShadow: "0 20px 40px rgba(34, 197, 94, 0.4)",
              scale: 1.05,
              rotate: 5
            }}
            animate={{
              boxShadow: [
                "0 10px 20px rgba(34, 197, 94, 0.2)",
                "0 15px 30px rgba(34, 197, 94, 0.3)",
                "0 10px 20px rgba(34, 197, 94, 0.2)"
              ]
            }}
            transition={{
              boxShadow: {
                duration: 3,
                repeat: Infinity,
                ease: "easeInOut"
              }
            }}
          >
            {/* Enhanced background animation */}
            <motion.div
              className="absolute inset-0 bg-gradient-to-r from-emerald-400 via-green-600 to-teal-600 rounded-full"
              animate={{
                scale: [1, 1.3, 1],
                opacity: [0.5, 0.8, 0.5],
                rotate: [0, 180, 360]
              }}
              transition={{
                duration: 4,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            />
            
            {/* AI Brain Icon with enhanced animation */}
            <motion.div
              className="relative z-10"
              animate={{
                rotate: [0, 15, -15, 0],
                scale: [1, 1.1, 1]
              }}
              transition={{
                duration: 5,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            >
              <Brain className="h-8 w-8" />
            </motion.div>
            
            {/* Multiple pulse effects */}
            <motion.div
              className="absolute inset-0 rounded-full border-2 border-green-300"
              animate={{
                scale: [1, 1.8, 2.2],
                opacity: [0.8, 0.3, 0]
              }}
              transition={{
                duration: 2.5,
                repeat: Infinity,
                ease: "easeOut"
              }}
            />
            <motion.div
              className="absolute inset-0 rounded-full border-2 border-emerald-300"
              animate={{
                scale: [1, 1.5, 2],
                opacity: [0.6, 0.2, 0]
              }}
              transition={{
                duration: 2.5,
                repeat: Infinity,
                ease: "easeOut",
                delay: 0.5
              }}
            />
            
            {/* Data streaming effect */}
            <motion.div
              className="absolute inset-0 rounded-full border border-white/20"
              animate={{
                rotate: [0, 360]
              }}
              transition={{
                duration: 8,
                repeat: Infinity,
                ease: "linear"
              }}
            />
          </motion.button>
          
          {/* Enhanced tooltip */}
          <motion.div
            className="absolute bottom-full right-0 mb-3 px-4 py-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 text-xs rounded-lg whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity shadow-lg"
            initial={{ opacity: 0, y: 10, scale: 0.8 }}
            whileHover={{ opacity: 1, y: 0, scale: 1 }}
          >
            <div className="flex items-center space-x-2">
              <Sparkles className="h-3 w-3" />
              <span>ü§ñ Advanced AI Krishi Assistant</span>
            </div>
            <div className="text-xs opacity-75 mt-1">Powered by Gemini 2.0 Flash + IoT Sensors</div>
            <div className="absolute top-full right-4 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900 dark:border-t-gray-100"></div>
          </motion.div>
        </motion.div>
      </motion.div>
    );
  }

  return (
    <motion.div
      className="fixed bottom-6 right-6 z-50"
      initial={{ scale: 0, opacity: 0 }}
      animate={{ scale: 1, opacity: 1 }}
      exit={{ scale: 0, opacity: 0 }}
      transition={{ type: "spring", stiffness: 300, damping: 30 }}
    >
      <Card className={`bg-white/95 dark:bg-gray-900/95 backdrop-blur-lg border-green-200 dark:border-gray-700 shadow-2xl transition-all duration-300 ${
        isMinimized ? 'w-80 h-16' : 'w-[420px] h-[700px]'
      }`}>
        {/* Enhanced Header */}
        <CardHeader className="border-b bg-gradient-to-r from-green-50 via-emerald-50 to-teal-50 dark:from-gray-800 dark:via-gray-700 dark:to-gray-800 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <motion.div 
                className="p-2 bg-gradient-to-r from-green-500 via-emerald-600 to-teal-600 rounded-lg relative overflow-hidden"
                animate={{
                  boxShadow: [
                    "0 0 0 0 rgba(34, 197, 94, 0.4)",
                    "0 0 0 8px rgba(34, 197, 94, 0)",
                    "0 0 0 0 rgba(34, 197, 94, 0.4)"
                  ]
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                <motion.div
                  animate={{ rotate: [0, 360] }}
                  transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
                >
                  <Brain className="h-5 w-5 text-white" />
                </motion.div>
              </motion.div>
              <div>
                <CardTitle className="text-lg flex items-center space-x-2">
                  <span>ü§ñ Advanced AI Krishi Assistant</span>
                  <motion.div
                    animate={{
                      scale: [1, 1.2, 1],
                      rotate: [0, 180, 360]
                    }}
                    transition={{
                      duration: 3,
                      repeat: Infinity,
                      ease: "easeInOut"
                    }}
                  >
                    <Sparkles className="h-4 w-4 text-yellow-500" />
                  </motion.div>
                  {apiError && (
                    <motion.div
                      animate={{ scale: [1, 1.1, 1] }}
                      transition={{ duration: 1, repeat: Infinity }}
                    >
                      <AlertCircle className="h-4 w-4 text-yellow-500" title="Running in Enhanced Demo Mode" />
                    </motion.div>
                  )}
                </CardTitle>
                <p className="text-xs text-gray-600 dark:text-gray-400">
                  {apiError ? 'Enhanced Demo Mode - Advanced Local AI' : 'Powered by Google Gemini 2.0 Flash + IoT Sensors'}
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-1">
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={toggleSpeech}
                className="p-1 h-8 w-8"
              >
                {isSpeaking ? <VolumeX className="h-4 w-4" /> : <Volume2 className="h-4 w-4" />}
              </Button>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setIsMinimized(!isMinimized)}
                className="p-1 h-8 w-8"
              >
                {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
              </Button>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setIsOpen(false)}
                className="p-1 h-8 w-8"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
          
          {/* AI Mode Selector */}
          {!isMinimized && (
            <div className="flex flex-wrap gap-2 mt-4">
              {aiModes.map((mode, index) => {
                const IconComponent = mode.icon;
                return (
                  <motion.button
                    key={mode.id}
                    onClick={() => setCurrentMode(mode.id)}
                    className={`flex items-center space-x-1 px-3 py-1 rounded-full text-xs transition-all ${
                      currentMode === mode.id 
                        ? 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400 border border-green-300 dark:border-green-700' 
                        : 'bg-gray-100 dark:bg-gray-800 hover:bg-green-50 dark:hover:bg-green-900/20 text-gray-600 dark:text-gray-400'
                    }`}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <IconComponent className="h-3 w-3" />
                    <span>{mode.name}</span>
                  </motion.button>
                );
              })}
            </div>
          )}
        </CardHeader>

        {!isMinimized && (
          <CardContent className="flex flex-col h-full p-0">
            {/* Enhanced Quick Actions */}
            <div className="p-4 border-b bg-gradient-to-r from-gray-50/50 to-green-50/50 dark:from-gray-800/50 dark:to-gray-700/50">
              <div className="grid grid-cols-3 gap-2">
                {quickActions.map((action, index) => {
                  const IconComponent = action.icon;
                  return (
                    <motion.button
                      key={index}
                      onClick={() => handleQuickAction(action.prompt, action.mode)}
                      className="flex flex-col items-center space-y-1 p-3 bg-white dark:bg-gray-700 rounded-lg border hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors text-center group"
                      whileHover={{ scale: 1.05, y: -2 }}
                      whileTap={{ scale: 0.95 }}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: index * 0.1 }}
                    >
                      <motion.div
                        className={`p-2 rounded-full bg-gradient-to-r ${
                          action.label === 'Crop Analysis' ? 'from-green-100 to-emerald-100 dark:from-green-900 dark:to-emerald-900' :
                          action.label === 'Smart Irrigation' ? 'from-blue-100 to-cyan-100 dark:from-blue-900 dark:to-cyan-900' :
                          action.label === 'Sensor Data' ? 'from-purple-100 to-indigo-100 dark:from-purple-900 dark:to-indigo-900' :
                          action.label === 'Market Intel' ? 'from-orange-100 to-red-100 dark:from-orange-900 dark:to-red-900' :
                          action.label === 'Pest Detection' ? 'from-red-100 to-pink-100 dark:from-red-900 dark:to-pink-900' :
                          'from-indigo-100 to-purple-100 dark:from-indigo-900 dark:to-purple-900'
                        }`}
                        whileHover={{ rotate: 360 }}
                        transition={{ duration: 0.6 }}
                      >
                        <IconComponent className={`h-4 w-4 ${action.color}`} />
                      </motion.div>
                      <span className="text-xs font-medium group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors">
                        {action.label.split(' ').map((word, i) => (
                          <div key={i}>{word}</div>
                        ))}
                      </span>
                    </motion.button>
                  );
                })}
              </div>
            </div>

            {/* Enhanced Messages */}
            <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
              <div className="space-y-4">
                {messages.map((message) => (
                  <motion.div
                    key={message.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div className={`flex space-x-2 max-w-[85%] ${message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                      <motion.div 
                        className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
                          message.type === 'user' 
                            ? 'bg-gradient-to-r from-blue-500 to-cyan-600' 
                            : 'bg-gradient-to-r from-green-500 via-emerald-600 to-teal-600'
                        }`}
                        whileHover={{ scale: 1.1, rotate: 5 }}
                      >
                        {message.type === 'user' ? (
                          <User className="h-4 w-4 text-white" />
                        ) : (
                          <motion.div
                            animate={{ rotate: [0, 360] }}
                            transition={{ duration: 8, repeat: Infinity, ease: "linear" }}
                          >
                            <Brain className="h-4 w-4 text-white" />
                          </motion.div>
                        )}
                      </motion.div>
                      <div className={`rounded-lg p-3 relative group ${
                        message.type === 'user'
                          ? 'bg-gradient-to-r from-blue-500 to-cyan-600 text-white'
                          : 'bg-gradient-to-r from-gray-100 to-white dark:from-gray-700 dark:to-gray-800 border dark:border-gray-600'
                      }`}>
                        <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                        <div className="flex items-center justify-between mt-2">
                          <p className="text-xs opacity-70">
                            {message.timestamp.toLocaleTimeString('hi-IN')}
                          </p>
                          {message.type === 'assistant' && (
                            <div className="flex items-center space-x-2">
                              {message.confidence && (
                                <Badge variant="secondary" className="text-xs bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400">
                                  <Activity className="h-2 w-2 mr-1" />
                                  {message.confidence}% confident
                                </Badge>
                              )}
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => copyMessage(message.content)}
                                className="opacity-0 group-hover:opacity-100 transition-opacity p-1 h-6 w-6"
                              >
                                <Copy className="h-3 w-3" />
                              </Button>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </motion.div>
                ))}
                
                {isTyping && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex justify-start"
                  >
                    <div className="flex space-x-2 max-w-[85%]">
                      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gradient-to-r from-green-500 via-emerald-600 to-teal-600 flex items-center justify-center">
                        <motion.div
                          animate={{ rotate: [0, 360] }}
                          transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                        >
                          <Brain className="h-4 w-4 text-white" />
                        </motion.div>
                      </div>
                      <div className="bg-gradient-to-r from-gray-100 to-white dark:from-gray-700 dark:to-gray-800 border dark:border-gray-600 rounded-lg p-3">
                        <div className="flex items-center space-x-2">
                          <Loader2 className="h-4 w-4 animate-spin text-green-600" />
                          <span className="text-sm">AI ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à...</span>
                          <motion.div
                            animate={{ scale: [1, 1.2, 1] }}
                            transition={{ duration: 1, repeat: Infinity }}
                          >
                            <Sparkles className="h-3 w-3 text-yellow-500" />
                          </motion.div>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}

                {/* Enhanced Suggestions */}
                {messages.length > 0 && messages[messages.length - 1].suggestions && !isTyping && (
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex flex-wrap gap-2"
                  >
                    {messages[messages.length - 1].suggestions!.map((suggestion, index) => (
                      <motion.button
                        key={index}
                        onClick={() => handleSuggestionClick(suggestion)}
                        className="text-xs bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 hover:from-green-100 hover:to-emerald-100 dark:hover:from-green-900/40 dark:hover:to-emerald-900/40 text-green-700 dark:text-green-400 px-3 py-2 rounded-full border border-green-200 dark:border-green-700 transition-all"
                        whileHover={{ scale: 1.05, y: -1 }}
                        whileTap={{ scale: 0.95 }}
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ duration: 0.3, delay: index * 0.1 }}
                      >
                        <motion.span
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          transition={{ delay: index * 0.1 + 0.2 }}
                        >
                          {suggestion}
                        </motion.span>
                      </motion.button>
                    ))}
                  </motion.div>
                )}
              </div>
            </ScrollArea>

            {/* Enhanced Input */}
            <div className="border-t p-4 bg-gradient-to-r from-gray-50/50 to-green-50/50 dark:from-gray-800/50 dark:to-gray-700/50">
              <div className="flex space-x-2">
                <div className="flex-1 relative">
                  <Input
                    ref={inputRef}
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§ø‡§ñ‡•á‡§Ç... / Type your farming question here..."
                    className="pr-10 bg-white dark:bg-gray-800"
                    disabled={isLoading}
                  />
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={toggleVoice}
                    className="absolute right-1 top-1/2 transform -translate-y-1/2 p-1 h-6 w-6"
                  >
                    {isListening ? (
                      <motion.div
                        animate={{ scale: [1, 1.3, 1] }}
                        transition={{ duration: 0.5, repeat: Infinity }}
                      >
                        <Mic className="h-3 w-3 text-red-500" />
                      </motion.div>
                    ) : (
                      <MicOff className="h-3 w-3 text-gray-400" />
                    )}
                  </Button>
                </div>
                <motion.div
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Button 
                    onClick={handleSendMessage}
                    disabled={!input.trim() || isLoading}
                    className="bg-gradient-to-r from-green-500 via-emerald-600 to-teal-600 hover:from-green-600 hover:via-emerald-700 hover:to-teal-700 shadow-lg"
                  >
                    {isLoading ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                      <Send className="h-4 w-4" />
                    )}
                  </Button>
                </motion.div>
              </div>
              
              {/* Enhanced Status indicators */}
              <div className="flex items-center justify-between mt-2 text-xs text-gray-500 dark:text-gray-400">
                <div className="flex items-center space-x-3">
                  {isListening && (
                    <motion.div
                      className="flex items-center space-x-1"
                      animate={{ opacity: [0.5, 1, 0.5] }}
                      transition={{ duration: 1, repeat: Infinity }}
                    >
                      <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                      <span>‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...</span>
                    </motion.div>
                  )}
                  {isSpeaking && (
                    <motion.div
                      className="flex items-center space-x-1"
                      animate={{ opacity: [0.5, 1, 0.5] }}
                      transition={{ duration: 1, repeat: Infinity }}
                    >
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <span>‡§¨‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...</span>
                    </motion.div>
                  )}
                  <div className="flex items-center space-x-1">
                    <Badge variant="secondary" className="text-xs bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400">
                      <Activity className="w-2 h-2 mr-1" />
                      {currentMode}
                    </Badge>
                  </div>
                  {apiError && (
                    <div className="flex items-center space-x-1 text-yellow-600">
                      <AlertCircle className="w-2 h-2" />
                      <span>Enhanced Demo</span>
                    </div>
                  )}
                </div>
                <div className="flex items-center space-x-2">
                  <motion.div
                    animate={{ scale: [1, 1.2, 1] }}
                    transition={{ duration: 2, repeat: Infinity }}
                  >
                    <div className={`w-2 h-2 rounded-full ${apiError ? 'bg-yellow-500' : 'bg-green-500'}`}></div>
                  </motion.div>
                  <span className="text-xs">
                    {apiError ? 'Enhanced Local AI' : 'Gemini 2.0 Flash'}
                  </span>
                  <motion.div
                    animate={{ rotate: [0, 360] }}
                    transition={{ duration: 4, repeat: Infinity, ease: "linear" }}
                  >
                    <Cpu className="w-3 h-3" />
                  </motion.div>
                </div>
              </div>
            </div>
          </CardContent>
        )}
      </Card>
    </motion.div>
  );
}